#!/usr/bin/env python3
# Tests for the Garmin data retrieval functions

import os
import sys
import unittest
from unittest.mock import patch, MagicMock
import datetime as dt
from pathlib import Path

# Add parent directory to path to import the src module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.downloader import get_stats, export_to_csv

class TestDataRetrieval(unittest.TestCase):
    """Tests for data retrieval functions"""
    
    @patch('src.downloader.dt.date')
    def test_get_stats_default_date(self, mock_date):
        """Test get_stats using default date (today)"""
        # Setup
        mock_today = MagicMock()
        mock_today.isoformat.return_value = '2025-05-09'
        mock_date.today.return_value = mock_today
        mock_date.fromisoformat.return_value = mock_today
        
        mock_garmin = MagicMock()
        mock_garmin.get_stats_and_body.return_value = {'steps': 10000}
        
        # Call function
        result = get_stats(mock_garmin)
        
        # Verify
        self.assertIsNotNone(result)
        mock_date.today.assert_called_once()
        # Just verify it was called once, don't specify the exact argument
        mock_garmin.get_stats_and_body.assert_called_once()

import os
import sys
import unittest
from unittest.mock import patch, MagicMock
import datetime
from pathlib import Path

# Add parent directory to path to import the downloader module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from downloader import get_stats

class TestDataRetrieval(unittest.TestCase):
    """Tests for Garmin data retrieval functions"""
    
    @patch('downloader.export_to_csv')
    @patch('downloader.copy_to_icloud')
    def test_get_stats_with_export(self, mock_copy, mock_export):
        """Test getting stats with export enabled"""
        # Setup
        mock_garmin = MagicMock()
        mock_garmin.get_stats_and_body.return_value = {
            'steps': 10000,
            'totalDistanceMeters': 8000,
            'totalKilocalories': 2500,
            'restingHeartRate': 60
        }
        
        # For export path
        mock_export.return_value = Path('/test/exports/garmin_stats.csv')
        mock_copy.return_value = True
        
        # Call function
        result = get_stats(mock_garmin, '2025-05-09', export=True)
        
        # Verify
        self.assertIsNotNone(result)
        mock_garmin.get_stats_and_body.assert_called_once()
        mock_export.assert_called_once()
        mock_copy.assert_called_once()
    
    def test_get_stats_no_client(self):
        """Test get_stats with no client"""
        result = get_stats(None, '2025-05-09')
        self.assertIsNone(result)
    
    @patch('datetime.date')
    def test_get_stats_default_date(self, mock_date):
        """Test get_stats using default date (today)"""
        # Setup
        mock_today = MagicMock()
        mock_today.isoformat.return_value = '2025-05-09'
        mock_date.today.return_value = mock_today
        mock_date.fromisoformat.return_value = mock_today
        
        mock_garmin = MagicMock()
        mock_garmin.get_stats_and_body.return_value = {'steps': 10000}
        
        # Call function
        result = get_stats(mock_garmin)
        
        # Verify
        self.assertIsNotNone(result)
        mock_date.today.assert_called_once()
        mock_garmin.get_stats_and_body.assert_called_once()
    
    def test_get_stats_invalid_date(self):
        """Test get_stats with invalid date format"""
        mock_garmin = MagicMock()
        
        # Call function with invalid date
        result = get_stats(mock_garmin, 'not-a-date')
        
        # Verify
        self.assertIsNone(result)
        mock_garmin.get_stats_and_body.assert_not_called()
    
    def test_get_stats_multiple_types(self):
        """Test get_stats retrieves all types of data"""
        # Setup
        mock_garmin = MagicMock()
        mock_garmin.get_stats_and_body.return_value = {
            'steps': 10000,
            'totalDistanceMeters': 8000,
            'activeKilocalories': 500,
            'bmrKilocalories': 1600,
            'totalKilocalories': 2100,
            'restingHeartRate': 60
        }
        
        # Call function
        result = get_stats(mock_garmin, '2025-05-09')
        
        # Verify
        self.assertEqual(result['steps'], 10000)
        self.assertEqual(result['totalDistanceMeters'], 8000)
        self.assertEqual(result['activeKilocalories'], 500)
        self.assertEqual(result['totalKilocalories'], 2100)
        self.assertEqual(result['restingHeartRate'], 60)


if __name__ == "__main__":
    unittest.main()
